{"version":3,"sources":["components/contactForm/ContactFormStyled.js","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactListItem/ContactListItemStyled.js","components/contactListItem/ContactListItem.js","contactList/ContactList.js","App.js","index.js"],"names":["ContactFormContainer","styled","form","InputContainer","input","LabelContainer","label","ButtonContainer","button","ContactForm","state","name","number","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","addNewContact","onSubmit","this","htmlFor","type","id","pattern","title","required","onChange","Component","Filter","filter","ContactListItemContainer","li","ContactListItem","className","onClick","deleteContact","ContactList","contacts","map","contact","uuid","App","some","alert","prevState","getFilteredContacts","toLowerCase","includes","trim","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.668d0a81.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nexport const ContactFormContainer = styled.form`\r\n  width: 50vw;\r\n  padding: 16px;\r\n  border: 2px solid grey;\r\n  border-radius: 4px;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const InputContainer = styled.input`\r\n  display: block;\r\n  min-width: 300px;\r\n  padding: 5px 10px;\r\n  margin-bottom: 15px;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 4px;\r\n  :focus {\r\n    outline: none;\r\n    border: 3px solid lightblue;\r\n  }\r\n`;\r\n\r\nexport const LabelContainer = styled.label`\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n`;\r\n\r\nexport const ButtonContainer = styled.button`\r\n  padding: 2px 10px;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 4px;\r\n  background-color: white;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition-duration: 0.4s;\r\n  :hover {\r\n    background-color: lightblue;\r\n    color: white;\r\n    border-color: lightblue;\r\n  }\r\n`;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n  ButtonContainer,\r\n  ContactFormContainer,\r\n  InputContainer,\r\n  LabelContainer\r\n} from './ContactFormStyled';\r\n\r\nclass ContactForm extends Component {\r\n  state = {name: '', number: ''};\r\n\r\n  handleChange = event => {\r\n    this.setState({[event.target.name]: event.target.value});\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    this.props.addNewContact({\r\n      name: this.state.name,\r\n      number: this.state.number\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ContactFormContainer onSubmit={this.handleSubmit}>\r\n        <LabelContainer htmlFor=\"name\">Name</LabelContainer>\r\n        <InputContainer\r\n          type=\"text\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleChange}\r\n          value={this.state.name}\r\n        />\r\n        <LabelContainer htmlFor=\"number\">Number</LabelContainer>\r\n        <InputContainer\r\n          type=\"tel\"\r\n          id=\"number\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChange}\r\n          value={this.state.value}\r\n        />\r\n        <ButtonContainer type=\"submit\">Add contact</ButtonContainer>\r\n      </ContactFormContainer>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addNewContact: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ContactForm;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {InputContainer, LabelContainer} from '../contactForm/ContactFormStyled';\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <LabelContainer htmlFor=\"filter\">Find contacts by name</LabelContainer>\r\n        <InputContainer\r\n          id=\"filter\"\r\n          type=\"text\"\r\n          onChange={this.props.handleChange}\r\n          name=\"filter\"\r\n          value={this.props.filter}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  handleChange: PropTypes.func,\r\n  filter: PropTypes.string\r\n};\r\n\r\nexport default Filter;\r\n","import styled from 'styled-components';\r\n\r\nexport const ContactListItemContainer = styled.li`\r\n  margin-bottom: 10px;\r\n  .contactListItemText {\r\n    display: inline-block;\r\n    margin-right: 10px;\r\n    font-size: 18px;\r\n  }\r\n`;\r\n","import React, {Component} from 'react';\r\nimport {ButtonContainer} from '../contactForm/ContactFormStyled';\r\nimport {ContactListItemContainer} from './ContactListItemStyled';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactListItem extends Component {\r\n  render() {\r\n    return (\r\n      <ContactListItemContainer>\r\n        <p className=\"contactListItemText\">\r\n          {this.props.name}: {this.props.number}\r\n        </p>\r\n        <ButtonContainer type=\"button\" onClick={this.props.deleteContact}>\r\n          Delete\r\n        </ButtonContainer>\r\n      </ContactListItemContainer>\r\n    );\r\n  }\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  deleteContact: PropTypes.func,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {v4 as uuid} from 'uuid';\r\nimport ContactListItem from '../components/contactListItem/ContactListItem';\r\n\r\nclass ContactList extends Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.contacts.map(contact => (\r\n          <ContactListItem\r\n            name={contact.name}\r\n            number={contact.number}\r\n            key={uuid()}\r\n            deleteContact={() => this.props.deleteContact(contact.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  deleteContact: PropTypes.func,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired\r\n    })\r\n  )\r\n};\r\n\r\nexport default ContactList;\r\n","import {Component} from 'react';\nimport ContactForm from './components/contactForm/ContactForm';\nimport Filter from './components/filter/Filter';\nimport ContactList from './contactList/ContactList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      contacts: [\n        {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n        {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n        {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n        {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'}\n      ],\n      filter: ''\n    };\n  }\n\n  addNewContact = ({name, number}) => {\n    if (this.state.contacts.some(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    this.setState(prevState => {\n      const newContacts = [...prevState.contacts, {name, number}];\n      // console.log({name, number});\n      return {contacts: newContacts};\n    });\n  };\n\n  getFilteredContacts = () =>\n    this.state.contacts.filter(contact =>\n      contact.name\n        .toLowerCase()\n        .includes(this.state.filter.toLowerCase().trim())\n    );\n\n  handleChange = event => {\n    this.setState({[event.target.name]: event.target.value});\n  };\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id)\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm addNewContact={this.addNewContact} />\n\n        <h2>Contacts</h2>\n        <Filter filter={this.state.filter} handleChange={this.handleChange} />\n        <ContactList\n          contacts={this.getFilteredContacts()}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}